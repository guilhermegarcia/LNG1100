---
title: "Modèle des projets A et B"
subtitle: "LNG-1100 : Méthodes expérimentales et analyse de données"
author: "Membres du groupe"
lang: fr
lg: fr
date: today
date-format: long
format: pdf
code-line-numbers: true
bibliography: refs.bib
bibliographystyle: apa
number-sections: true
fig-pos: "H"
crossref: 
  fig-title: "Figure"
  tbl-title: "Tableau"
  title-delim: "."
  fig-prefix: "Fig."
  tbl-prefix: "Tableau"
---

<!-- Citation : -->
<!-- @xxx -> auteur (année) -->
<!-- [@xxx] -> (auteur, année) -->
<!-- [@xxx; @yyy] -> (auteur_x, année; auteur_y, année) -->

# Introduction {#sec-intro}

Ajouter votre introduction ici. Les principales options de formatage en Markdown sont les suivantes :

- gras : **texte**
- italique : *texte*
- code : noms de `variables`, `extensions` ou `fonctions`
- lien : un [**lien**](https://google.ca) externe
- consultez le cheatsheet pour Markdown ici


Voici un exemple de référence croisée : dans la @sec-methodes, on explique la... etc. C'est ici que vous pouvez également donner une idée générale sur le sujet du projet, en ajoutant, par exemple, une ou deux citations d'études qui explorent le même sujet.

# Méthodes {#sec-methodes}

Dans cette section, vous décrivez vos méthodes et les outils utilisés, ce qui inclut le langage R [@r] ainsi que les extensions employées. Vous pouvez ajouter des sous-sections, naturellement, en utilisant `##`. Vous n'avez pas besoin de nommer les fonctions que vous avez utilisées (sauf si vous voulez les discuter dans la section de difficultés analytiques dans l'appendice à la fin du document). L'élément le plus important de mentionner est naturellement le type d'analyse statistique employée.

# Résultats et analyse {#sec-resultats}

Voici un exemple de figure ne Quarto. Pour se référer à la figure, utilisez la même stratégie des références croisées : `@fig-fig1`. Veuillez noter que votre fichier `PDF` n'aura aucun code explicite (les codes seront dans l'appendice). Donc, il faut toujours ajouter `echo: false` dans vos blocs de code. Examinez la @fig-fig1.


```{r}
#| message: false
#| echo: false
#| out.width: 65%
#| fig-cap: "Légende da la figure"
#| fig.width: 5
#| fig-align: "center"
#| fig.height: 3
#| fig.dpi: 1000
#| label: fig-fig1
library(tidyverse)

# Notez que le fichier anglais.csv est dans un répertoire parent
# Donc, il faut utiliser ../ pour le trouver
d = read_csv("../donnees/anglais.csv")
ggplot(data = d, aes(x = Familiarite, y = TR)) + 
  geom_point(alpha = 0.3) +
  stat_smooth(method = "lm") +
  labs(x = "Familiarité",
       y = "Temps de réaction (log ms)") +
  theme_classic()
```

Assurez-vous que la taille de la police dans la figure est appropriée. Vous pouvez essayer de différentes dimensions dans la configuration de la figure (`fig.height` et `fig.width`) ou vous pouvez manuellement définir la taille de la police dans la figure (p. ex., `theme_classic(base_size = 15)`. Idéalement, la police dans une figure (ses axes) ne doit pas être plus grande que la taille de la police du texte du document.

Dans votre texte, vous pouvez ajouter le code R pour automatiser vos calculs. Par exemple, si vous décrivez les moyennes des groupes dans le texte, vous n'avez pas besoin de les inclure manuellement. Il faut juste ajouter votre code entre deux accents graves après le préfixe `r`. Par exemple, le temps de réaction moyen du fichier utilisé dans la @fig-fig1 est de `r mean(d$TR) |> round(2)` log(ms). En effet, vous pouvez également utiliser des expressions mathématiques en utilisant `$...$`. Donc, on pourrait combiner les deux choses : $\bar{x}=$ `r mean(d$TR) |> round(2)` ms. L'avantage est évident : si on change nos données, la valeur en question sera automatiquement mise à jour.


Pour ajouter des tableaux, vous pouvez utiliser l'extension `kableExtra`, qui nous permet d'imprimer un tableau directement dans le `PDF`---veuillez noter que ce type d'extension ne doit pas être citée dans votre texte. Examinez le @tbl-tableau1.

```{r}
#| message: false
#| tbl-align: "center"
#| tbl-cap: "Légende du tableau"
#| label: tbl-tableau1
#| tbl-cap-location: top
#| echo: false

library(kableExtra)
d |> # prenez un objet
  tail() |> # selectionnez juste quelques lignes
  kable() # générez le tableau
```

Les résultats de vos modèles peuvent être présentés dans un tableau ou dans une figure (consultez l'extension `sjPlot` ainsi que la documentation des fonctions pertinentes, telle que [`tab_model()`](https://strengejacke.github.io/sjPlot/reference/tab_model.html)). Le @tbl-model est un exemple.

```{r}
#| message: false
#| echo: false
#| tbl-align: "center"
#| tbl-cap: "Légende du tableau d'un modèle"
#| label: tbl-model
#| tbl-cap-location: top
library(sjPlot)
fit = lm(TR ~ Age, data = d)
tab_model(fit,
          string.pred = "Variables", 
          string.ci = "IC 95 %",
          string.est = "Coefficients",
          string.p = "Valeur p")
```


# Conclusion {#sec-conclusion}



# Références {-}

::: {#refs}
:::

{{< pagebreak >}}

# Appendice {-}

## Difficultés analytiques {-}

Décrivez ici votre processus de décision et les difficultés analytiques rencontrées par le groupe. Si vous voulez, vous pouvez vous référer aux numéros de lignes dans le code de la sous-section ci-dessous.

## Code {-}

Ajoutez une version claire et **commentée** de votre code dans cette section---réservez cet espace pour le code **directement** pertinent au document `PDF`, c'est-à-dire le code juste pour les figures/modèles/tableaux que vous avez décidé d'inclure dans le document final. 

```{r}
#| eval: false # vous pouvez changer cette valeur pour vous assurez que votre code marche bien
#| echo: true

# Code pour le nettoyage des données (si nécessaire)

# Code pour l'exploration de données (résumés, tableaux, figures, etc.)

# Code de l'analyse (modèles, prédictions, etc.)
```

